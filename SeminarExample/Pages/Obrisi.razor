@page "/obrisi/{id:int}"
@inject NavigationManager navManager;
@using SeminarExample.Models
@inject HttpClient httpClient;
<h3>Delete</h3>
Proslijeđeni Id= @Id

@if (IsError == true)
{
    <p>
        Uppps! došlo je do greške.
        Kontaktirajte administratora.
    </p>
}
<div class="card">
    <h5 class="card-header">
        Zadatak:<br>
        <b> @radniZadatak.ToDo </b>
    </h5>
    <div class="card-body">
        <h5 class="card-title">
            Zaduženi Radnik:
            @radniZadatak.RadnikIme,  @radniZadatak.RadnikPrezime
        </h5>
        <p class="card-text"> @radniZadatak.OpisPosla</p>
        @if (radniZadatak.IsDone)
        {
            <p class="card-title">
                Uspješno završen zadatak
            </p>
            <p class="card-title">@radniZadatak.Datum</p>

        }
        <button class="btn btn-primary" @onclick="()=>ObrisiZadatak()">Obriši riješeni zadatak</button>

    </div>
</div>
<button @onclick="Nazad">Nazad</button>

<button @onclick="ObrisiZadatak">Obriši radni zadatak</button>
@code {
    [Parameter]
    public int Id { get; set; }
    RadniZadatak radniZadatak = new RadniZadatak();
    public bool IsError = false;
    protected override async Task OnInitializedAsync()
    {
        var result = await httpClient.GetAsync($"https://expertvjezbeapi.azurewebsites.net/api/ToDoSeminars/{Id}");
        if (result.IsSuccessStatusCode)
        {
            radniZadatak = await result.Content.ReadFromJsonAsync<RadniZadatak>();
        }
    }

    public void Nazad()
    {
        navManager.NavigateTo("rijeseno");
    }

    public async Task ObrisiZadatak()
    {
        var result = await httpClient.DeleteAsync($"https://expertvjezbeapi.azurewebsites.net/api/ToDoSeminars/{Id}");
        if (result.IsSuccessStatusCode)
        {
            navManager.NavigateTo("rijeseno");
        }
        else
        {
            IsError = true;
        }


    }

}
